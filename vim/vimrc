" =============================================================================
" -1 Problems You Think We Would've Solved 10 Years Ago
" =============================================================================
scriptencoding utf-8

" =============================================================================
" 0 Vim-Plug Setup
" =============================================================================
" {{{
call plug#begin('~/.vim/plugged')

" Misc Plugins {{{
" Git Plugin
Plug 'tpope/vim-fugitive'

" Startup Page
Plug 'mhinz/vim-startify'

" Solarised Color Scheme
Plug 'altercation/vim-colors-solarized'

" Makes vim respond well as a pager Test
Plug 'rkitover/vimpager'
" }}}

" Commenting Plugins {{{
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/comments.vim'
" }}}

" Development Specific Plugins (Darwin or when $RS_DEV==true) {{{
if (v:version > 702 && ($RS_DEV == "true" || system('uname') =~? "Darwin"))
    if ( $WORK_MODE == "true")
        Plug 'Shougo/neocomplete.vim'

    else
        " YCM for Code Completion
        Plug 'Valloric/YouCompleteMe', {
                    \ 'do' : './install.py --clang-completer --tern-completer --racer-completer --gocode-completer'
                    \ }
        " Syntastic code competion, replaced by YCM
        " Plug 'scrooloose/syntastic'

        " Enhanced colouring for C family of languages
        Plug 'jeaye/color_coded', {
                    \ 'do' : 'cmake . && make && make install',
                    \ 'for' : ['c', 'cpp', 'objc', 'objcpp']
                    \ }

        "Plug 'Quramy/tsuquyomi'
    endif
endif
" }}}

" Helpful Commands {{{
" Magical tabularisation
Plug 'godlygeek/tabular'

" Surround
Plug 'tpope/vim-surround'

" Automatic sublime-style delimiters
Plug 'Raimondi/delimitMate'
" }}}

" Airline {{{
" Airline
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'

"Plug 'edkolev/promptline.vim'
"
"Plug 'edkolev/tmuxline.vim'
" }}}

" Language Specific Plugins {{{

" Javascript {{{
" Indentation and Syntax support
Plug 'pangloss/vim-javascript'

" JSON highlighting support
Plug 'elzr/vim-json'

" Tern (auto-completion for JS)
if ( executable("tern") )
    Plug 'marijnh/tern_for_vim', {
                \ 'for' : ['js']
                \ }
endif
" }}}

if ( $WORK_MODE != "true" )

" Typescript {{{
Plug 'leafgarland/typescript-vim'
Plug 'clausreinke/typescript-tools.vim'
" }}}

" toml {{{
Plug 'cespare/vim-toml', {
            \ 'for' : ['toml']
            \ }
" }}}

" Markdown Plugins {{{
Plug 'plasticboy/vim-markdown'
Plug 'jtratner/vim-flavored-markdown'
" }}}

" Haskell {{{
if ( executable("hdevtools") )
    " Haskell
    Plug 'bitc/vim-hdevtools', {
                \ 'for': ['haskell', 'lhaskell', 'chaskell'],
                \ }

    Plug 'dag/vim2hs', {
                \ 'for': ['haskell', 'lhaskell', 'chaskell'],
                \ }
endif
" }}}

" HTML/CSS {{{
Plug 'mattn/emmet-vim', {
            \ 'for': ['html', 'css'],
            \ }
" }}}

" Rust {{{
" NeoBundleLazy 'phildawes/racer', {
"             \ 'build': {
"             \   'mac': 'cargo build --release',
"             \   'unix': 'cargo build --release',
"             \  },
"             \ 'autoload' : {
"             \   'filetypes' : ['rust'],
"             \  }
"             \  }

Plug 'rust-lang/rust.vim', {
            \ 'for': ['rust'],
            \ }
"}}}

" Clojure {{{
" Syntax highlighting and indentation
Plug 'guns/vim-clojure-static', {
            \ 'for' : 'clojure',
            \ }

" Leiningen
Plug 'tpope/vim-salve', {
            \ 'for' : 'clojure',
            \ }

" REPL in vim
Plug 'tpope/vim-fireplace', {
            \ 'for' : 'clojure',
            \ }

" Better Clojure highlighting
Plug 'guns/vim-clojure-highlight', {
            \ 'for' : 'clojure',
            \ }
" }}}

endif

" YAML {{{
Plug 'avakhov/vim-yaml', {
            \ 'for' : ['yaml'],
            \ }
" }}}

" Ruby {{{
Plug 'vim-ruby/vim-ruby', {
            \ 'for': ['ruby']
            \ }
" }}}

" Perl 5 {{{
Plug 'vim-perl/vim-perl', {
            \ 'for' : ['perl']
            \ }
" }}}
" }}}

" Visual Helpers {{{

" Split manager
Plug 'zhaocai/GoldenView.Vim'

" Indentation Guidelines
Plug 'Yggdroot/indentLine'

" Reveals trailing whitespace
Plug 'ntpeters/vim-better-whitespace'

" Rainbow Parens
Plug 'luochen1990/rainbow'
" }}}

" NerdTREE {{{
Plug 'scrooloose/nerdtree'

" git markers in nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin'
" }}}

call plug#end()

filetype plugin indent on    " required

" }}}
" =============================================================================
" 1 important
" =============================================================================

" =============================================================================
" 2 moving around, searching and patterns
" =============================================================================
" {{{
set incsearch " highlight dynamically as they are typed.

" Case insensitive search, except when using *
set ignorecase
set smartcase

" Enhanced % matching
runtime macros/matchit.vim
" }}}

" =============================================================================
" 3 tags
" =============================================================================

" =============================================================================
" 4 displaying text
" =============================================================================

if v:version > 702
    set relativenumber
endif
set number

" =============================================================================
" 5 syntax, highlighting and spelling
" =============================================================================
" {{{
colorscheme solarized
call togglebg#map("<F5>")

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
syntax on
filetype on
filetype plugin on
filetype indent on

" Colourisation Settings
set t_Co=256

" Set background based on iTerm theme
if $ITERM_PROFILE == "Solarized Light"
    set background=light
else
    set background=dark
endif

" Spellcheck
set spell
set spelllang=en_gb
set spellfile=~/dotfiles/vim/vimspellfile.utf-8.add
hi clear SpellBad
hi SpellBad cterm=underline gui=underline

" Line at 100 chars
set colorcolumn=100

" Pretty line wrap
set showbreak=â†©

" Highlight search matches
set hlsearch
"}}}

" =============================================================================
" 6 multiple windows
" =============================================================================

" Multiple buffer support
set hidden

" Make the statusbar always visible for Airline
set laststatus=2

" =============================================================================
" 7 multiple tab pages
" =============================================================================

" =============================================================================
" 8 terminal
" =============================================================================

" Show title in terminals
set title

" But get rid of the "thanks for flying vim" bs
set titleold="Really, this is better than Emacs. We Promise"

" =============================================================================
" 9 using the mouse
" =============================================================================

set mouse=a

if !has('nvim')
    set ttymouse=xterm2
endif

" =============================================================================
" 10 GUI
" =============================================================================
if ( has("gui_running") )
    if (system('uname') =~? "Darwin")
        set guifont=Anonymice\ Powerline:h14
    else
        set guifont=Anonymice\ Powerline\ 14
    endif
    "set guifont=Anonymous\ Pro\ 12

    " Dialogs show up in the console
    set guioptions+=c

endif

" =============================================================================
" 11 printing
" =============================================================================

" =============================================================================
" 12 messages and info
" =============================================================================

" Use a confirmation dialogue when saving instead of violently failing
set confirm

" Shortmess, see :help shortmess
" Gets rid of annoying "please hit enter" stuff
set shortmess=filnxtToOsA

" noshowmode avoids annoying duplication on the bar below the airline bar
set noshowmode

" =============================================================================
" 13 selecting text
" =============================================================================

" =============================================================================
" 14 editing text
" =============================================================================

" Intuitive backspacing in insert mode
set backspace=indent,eol,start

" =============================================================================
" 15 tabs and indenting
" =============================================================================
" Taken from Haskell docs
set tabstop=8                   "A tab is 8 spaces
set expandtab                   "Always uses spaces instead of tabs
set softtabstop=4               "Insert 4 spaces when tab is pressed
set shiftwidth=4                "An indent is 4 spaces
set shiftround                  "Round indent to nearest shiftwidth multiple

set smartindent

" =============================================================================
" 16 folding
" =============================================================================

" less annoying defaults for codefolding
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
set foldmethod=indent
" Don't automatically fold
set foldenable

" =============================================================================
" 17 diff mode
" =============================================================================

" =============================================================================
" 18 mapping
" =============================================================================
" {{{
" Because our lord demands it:
" Vim. Live it. ------------------------------------------------------- {{{
inoremap <up> <nop>
noremap <up> <nop>
inoremap <down> <nop>
noremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
noremap <left> <nop>
noremap <right> <nop>
" B-A-<start> }}}

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Sanity Preservation measures
" Old:
" cmap WQ wq
" cmap Wq wq
" cmap W w
" cmap Q q
" new, possibly better
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>

" Fuck :X
cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'

" Disable auto-comment
noremap <expr> <enter> getline('.') =~ '^\s*//' ? '<enter><esc>S' : '<ente    r>'

" Fixes auto comment with O keys {{{
nnoremap <expr> O getline('.') =~ '^\s*//' ? 'O<esc>S' : 'O'
noremap <expr> o getline('.') =~ '^\s*//' ? 'o<esc>S' : 'o'
" }}}

" Press F6 to delete trailing whitespace
nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Disable EX mode
:map Q <Nop>

" Disable search highlights when exiting search
" nnoremap <esc> :let @/ = ""<return><esc>

" When in (g)vimdiff, q will close all
if &diff
    " Doesn't work as intended; it prevents you from typing q
    " cnoremap q :qall
endif


" GoldenView {{{
let g:goldenview__enable_default_mapping = 0

" 1. split to tiled windows
nmap <silent> <S-L>  <Plug>GoldenViewSplit

" 2. quickly switch current window with the main pane
" and toggle back
nmap <silent> <F8>   <Plug>GoldenViewSwitchMain
nmap <silent> <S-F8> <Plug>GoldenViewSwitchToggle

" 3. jump to next and previous window
nmap <silent> <C-N>  <Plug>GoldenViewNext
nmap <silent> <C-P>  <Plug>GoldenViewPrevious
" }}}

" Split Navigation {{{
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" }}}

"}}}

" =============================================================================
" 19 reading and writing files
" =============================================================================

" =============================================================================
" 20 the swap file
" =============================================================================

" Auto reload file if modified
set autoread

" Backup and swap directories
" Deliberate double slash: it makes the backup/swap take into account the full
" path
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//

" Swap is enabled again, but +A is added to shortmess to hide that dialogue

" =============================================================================
" 21 command line editing
" =============================================================================

if v:version > 703
    set undofile
    set undodir=~/.vim/undodir//
    set undoreload=10000
endif
set undolevels=1000

" =============================================================================
" 22 executing external commands
" =============================================================================

" Longer history
set history=1000

" Enhanced file/command completion
set wildmenu
set wildmode=list:longest

" =============================================================================
" 23 running make and jumping to errors
" =============================================================================

" =============================================================================
" 24 language specific
" =============================================================================

" =============================================================================
" 25 multi-byte characters
" =============================================================================
set encoding=utf-8

" =============================================================================
" 26 various
" =============================================================================
set gdefault

" =============================================================================
" 27 Operating System Specific Settings
" =============================================================================

" ----------------------------------------------------------------------------
" 27.1 OS X
" ----------------------------------------------------------------------------

if (system('uname') =~? "Darwin")
    " OS X clipboard. Only fixes macvim, not the standard vim build
    set clipboard=unnamed

    " Enables double-width characters (this is an iTerm Compatibility thing
    " for when double-width characters are enabled)
    " set ambiwidth=double
endif

" ----------------------------------------------------------------------------
" 27.2 Linux
" ----------------------------------------------------------------------------

if (system('uname') =~? "Linux")
    " Assumes X11, should make yanking work
    if v:version >= 703
        set clipboard=unnamedplus
    else
        set clipboard=unnamed
    endif

endif

" =============================================================================
" 28 Plugin Settings
" =============================================================================

" -----------------------------------------------------------------------------
" 28.1 Airline, Promptline, Tmuxline
" -----------------------------------------------------------------------------

" Airline {{{
let g:Powerline_symbols = 'fancy'
let g:airline_powerline_fonts = 1

let g:airline_theme = 'solarized'

" don't count trailing whitespace since it lags in huge files
let g:airline#extensions#whitespace#enabled = 0

" disable to improve fugitive performance
let g:airline#extensions#branch#enabled = 1

" put a buffer list at the top
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" }}}

" Promptline {{{
let g:promptline_theme = 'airline'
"let g:promptline_preset = {
"        \'a' : [ '$(if [ -z "${TMUX}" ] && ( [ -n "${SSH_CLIENT}" ] || [ -n "${SSH_TTY}" ] ); then if [[ -n ${ZSH_VERSION-} ]]; then print %m; elif [[ -n ${FISH_VERSION-} ]]; then hostname -s; else printf "%s" \\h; fi; fi )' ],
"        \'b' : [ '$USER'],
"        \'c' : [ promptline#slices#cwd() ],
"        \'y' : [ promptline#slices#vcs_branch() ],
"        \'warn' : [ promptline#slices#last_exit_code() ]}
" }}}

" Tmuxline {{{
let g:tmuxline_preset = 'full'
let g:tmuxline_theme = 'airline'
" }}}

" -----------------------------------------------------------------------------
" 28.2 Syntastic, YouCompleteMe, and NeoComplete
" -----------------------------------------------------------------------------

" Left over Syntastic stuff
" Enable C++11 Support for Syntastic
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-Wall -std=c++11 -stdlib=libc++'

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/ycm_cpp11.py'
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_register_as_syntastic_checker = 1
" let g:Show_diagnostics_ui = 1 "default 1
let g:ycm_confirm_extra_conf = 0
"let g:ycm_server_keep_logfiles = 1
"let g:ycm_server_log_level = 'debug'
"let g:ycm_warning_symbol = '.'
"let g:ycm_error_symbol = '..'
"let g:ycm_server_use_vim_stdout = 1


" NeoComplete
let g:acp_enableAtStartup = 1

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" -----------------------------------------------------------------------------
" 28.3 mhinz/vim-startify
" -----------------------------------------------------------------------------
" {{{
let g:startify_bookmarks = [
            \   '~/dotfiles/vim/vimrc',
            \   '~/dotfiles/zsh/zshrc',
            \   '~/dotfiles/zsh/zshenv',
            \   '~/dotfiles/zsh/MyAntigen.hs',
            \   '~/dotfiles/tmux/tmux.conf'
            \ ]

function! s:center_header(lines) abort " {{{
    let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
    let centered_lines = map(copy(a:lines), 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
    return centered_lines
endfunction
" }}}

let g:startify_custom_header = s:center_header(split(system('shuf -n 1 ~/dotfiles/vim/cow | cowthink'), '\n'))
" }}}

" -----------------------------------------------------------------------------
" 28.4 elzr/vim-json
" -----------------------------------------------------------------------------
let g:vim_json_syntax_conceal = 0

" -----------------------------------------------------------------------------
" 28.5 luochen1990/rainbow
" -----------------------------------------------------------------------------
let g:rainbow_active = 1

let g:typescript_indent_disable = 1

" -----------------------------------------------------------------------------
" 28.6 rkitover/vimpager
" -----------------------------------------------------------------------------
let g:vimpager = {}
let g:less = {}

let g:less.enabled = 0

" -----------------------------------------------------------------------------
" 28.7 Raimondi/delimitMate
" -----------------------------------------------------------------------------
let delimitMate_expand_cr = 1

" =============================================================================
" 29 Language Specific Fun-ness
" =============================================================================

" =============================================================================
" 30 Autocmds
" =============================================================================

" Save buffers on lost focus
au FocusLost * silent! wa
autocmd FileType html,css EmmetInstall
autocmd FileType startify,help set nofoldenable

" From http://vim.wikia.com/wiki/Modeline_magic
"
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction

nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" =============================================================================
" 31 Environment Specific Configurations
" =============================================================================
if (!empty(glob("~/dotfiles/vim/local/*/*.vimrc"))) 
    source ~/dotfiles/vim/local/*/*.vimrc
endif

" Modeline, nothing after this line:
" vim: set foldmethod=marker ts=8 sw=4 tw=78 et :
